from db_tools import *
import warnings
import os
import math
warnings.filterwarnings('ignore')
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from statsmodels.tsa.arima_model import ARIMA
import numpy as np
import warnings
import pandas as pd
from sklearn import preprocessing
from statsmodels.tsa.seasonal import  seasonal_decompose
warnings.filterwarnings('ignore')
def Region():
    Adamin_Region = {
        1: ["ws0kz","ws0m6","ws0my","ws0t9","ws0tg","ws0mw","ws0sc","ws0kt","ws0sf","ws0te","ws0mk","ws0ts","ws0m5","ws0mp","ws0mm","ws0w4","ws0m4","ws0kq","ws0t1","ws0m7","ws0t2","ws0mt","ws0w1","ws0tf","ws0tv","ws0mq","ws0t3","ws0tt","ws0mj","ws0tc","ws0kg","ws0mr","ws0w3","ws0mz","ws0mv","ws0sb","ws0km","ws0t8","ws0ku","ws0tb","ws0td","ws0w6","ws0mx","ws0t6","ws0kw","ws0mh","ws0kf","ws0t4","ws0kv","ws0tu","ws0t0","ws0ky","ws0mn"],
        2: ["ws0c8","ws0b2","ws0c0","ws0c1","ws09q","ws09e","ws0cb","ws08z","ws0b6","ws0c7","ws0d5","ws0c5","ws0c6","ws0b9","ws0bf","ws0b3", "ws0c3","ws0dj","ws09y","ws09z","ws09p","ws0dh","ws09w","ws0b8","ws09n","ws0dm","ws0bd","ws09x", "ws0c4","ws09u","ws0bc","ws0bb","ws0c9","ws09t","ws0b7","ws0d7","ws08y","ws0cc","ws09g","ws0dk","ws09s","ws09v","ws0be","ws09r","ws0c2","ws0bg"],
        3: ["ws0vs", "ws0ut", "ws0vw", "ws0v0", "ws0vy", "ws0ur", "ws0ym", "ws0gg", "ws0gy", "ws1h3", "ws1jb", "ws1hf", "ws0vr", "ws0v5", "ws0gb", "ws0yh", "ws0uk", "ws0vh", "ws1j3", "ws0uh", "ws0ud", "ws0uq", "ws0vv", "ws0vk", "ws0us", "ws0yq", "ws1j2", "ws0vx", "ws1h8", "ws0g9", "ws0v2", "ws0g8", "ws0u9", "ws0u5", "ws0uz", "ws0vz", "ws0v4", "ws0uj", "ws0u3", "ws0v6", "ws0uy", "ws0vu", "ws0un", "ws1j4", "ws0yn", "ws1hc", "ws0v3", "ws0ux", "ws0u1", "ws0uv", "ws0g3", "ws1h9", "ws0vt", "ws1h6", "ws1j6", "ws1j8", "ws0u6", "ws0g2", "ws1hd", "ws0u8", "ws0ug", "ws0u4", "ws0vm", "ws0v1", "ws1h2", "ws0gf", "ws0gu", "ws0gv", "ws0vq", "ws0uw", "ws0uc", "ws1j1", "ws0vj", "ws0yk", "ws0vp", "ws0gc", "ws0vn", "ws0uu", "ws1hb", "ws0u7", "ws0v7", "ws0u2", "ws0yj", "ws1j0", "ws0ub", "ws0ue", "ws0u0", "ws0um", "ws0uf"],
        4: ["ws1pc", "ws0ws", "ws0zp", "ws0z6", "ws0yu", "ws0wt", "ws1p0", "ws0zd", "ws0y7", "ws1pd", "ws300", "ws0y4", "ws1p1", "ws0yv", "ws0zn", "ws0vd", "ws0zm", "ws1nb", "ws0wm", "ws0vf", "ws0y1", "ws0zu", "ws0wk", "ws0y5", "ws0yw", "ws304", "ws1p3", "ws1p8", "ws0vc", "ws0yt", "ws0we", "ws0y3", "ws301", "ws0y0", "ws1pb", "ws0w5", "ws1pf", "ws0wv", "ws0zt", "ws0ze", "ws0zy", "ws0v8", "ws0ty", "ws0zq", "ws0ys", "ws2bj", "ws0wn", "ws0yf", "ws2bp", "ws0v9", "ws1p4", "ws0z5", "ws1p9", "ws2bh", "ws0zx", "ws0wu", "ws0yy", "ws0vb", "ws0z7", "ws0y6", "ws0zs", "ws0tw", "ws0yz", "ws0yg", "ws0wp", "ws0zj", "ws0zz", "ws0wj", "ws0zw", "ws0zh", "ws0vg", "ws1p6", "ws0yx", "ws1n8", "ws0wh", "ws0yd", "ws0tz", "ws0wq", "ws1p2", "ws0zr", "ws0tx", "ws0y2", "ws0zv", "ws0ye", "ws0zk", "ws0w7", "ws0z4", "ws2bn", "ws0wg", "ws0wr", "ws0ve"],
        5: ["ws0d1", "ws0d9", "ws0dp", "ws0d6", "ws0dr", "ws0d4", "ws0dd", "ws0dc", "ws0dv", "ws0dn", "ws0d3", "ws0dx", "ws0dw", "ws0de", "ws0en", "ws0ej", "ws0ds", "ws0dg", "ws0e4", "ws0eh", "ws0dt", "ws0du", "ws0dq", "ws0e1", "ws0dz", "ws0dy", "ws0df", "ws0e5", "ws0ep"],
        6: ["ws0sm", "ws0kx", "ws0s6", "ws0ef", "ws0s0", "ws0sk", "ws0tj", "ws0t5", "ws0sr", "ws0sd", "ws0s7", "ws0kp", "ws0sg", "ws0eb", "ws0tm", "ws0se", "ws0s2", "ws0th", "ws0s1", "ws0st", "ws07z", "ws0sx", "ws0s8", "ws0ec", "ws0ss", "ws0sq", "ws0sw", "ws0su", "ws0tk", "ws0sv", "ws0t7", "ws0s3", "ws0s4", "ws0s9", "ws0kr"],
        7: ["ws0tp", "ws0ey", "ws0tn", "ws0ex", "ws0tq", "ws0sy", "ws0er", "ws0eq", "ws0ew", "ws0tr", "ws0sp", "ws0ez", "ws0sn", "ws0sz"],
        8: ["ws0e8","ws0e2"],
        9: ["ws0ee", "ws0em", "ws0et", "ws0e9", "ws0e7", "ws0ed", "ws0es", "ws0ek", "ws0e6", "ws0e3"],
        10: ["ws0eu", "ws0sh", "ws0s5", "ws0ev", "ws0sj", "ws0eg"],
        11: ["ws07r","ws07x"]
    }
    return Adamin_Region

def get_date_time(strs):
    return datetime.strptime(strs, '%Y-%m-%d %H:%M:%S')

def changeData(dataSet, type):
    if type == 'mileage_utilization':
        paint_dataSet = []
        for data in dataSet:
            time_ = data[3]
            now_time = (get_date_time(time_[0]) + timedelta(hours=0.5))
            paint_dataSet.append([data[0], str(now_time)])
        dataSet = pd.DataFrame(paint_dataSet,columns=['mileage_utilization', 'date'])
    elif type == 'time_utilization':
        i = 0
        paint_dataSet = []
        for data in dataSet:
            time_ = data[3]
            now_time = (get_date_time(time_[0]) + timedelta(hours=0.5))
            paint_dataSet.append([i, data[1], str(now_time)])
            i += 1
        dataSet = pd.DataFrame(paint_dataSet, columns=['count', 'time_utilization', 'date'])
    elif type == 'pick_up_freq':
        i = 0
        paint_dataSet = []
        for data in dataSet:
            time_ = data[3]
            now_time = (get_date_time(time_[0]) + timedelta(hours=0.5))
            paint_dataSet.append([i, data[2], str(now_time)])
            i += 1
        dataSet = pd.DataFrame(paint_dataSet, columns=['count', 'pick_up_freq', 'date'])
    return dataSet

def loadData():
    dataSet = [[0.6707041610160324, 0.6295377519227996, 962, ['2017-02-03 00:00:00', '2017-02-03 01:00:00']], [0.6127027783750504, 0.671022241673307, 679, ['2017-02-03 01:00:00', '2017-02-03 02:00:00']], [0.6029141571664158, 0.5149796974371224, 443, ['2017-02-03 02:00:00', '2017-02-03 03:00:00']], [0.5518716016836177, 0.48230288123938037, 238, ['2017-02-03 03:00:00', '2017-02-03 04:00:00']], [0.5075097655326354, 0.37526518425394817, 168, ['2017-02-03 04:00:00', '2017-02-03 05:00:00']], [0.5495210086480508, 0.4652541006492613, 131, ['2017-02-03 05:00:00', '2017-02-03 06:00:00']], [0.5592865820377837, 0.44119936449036595, 232, ['2017-02-03 06:00:00', '2017-02-03 07:00:00']], [0.6797143244082947, 0.5388256456225465, 515, ['2017-02-03 07:00:00', '2017-02-03 08:00:00']], [0.6892198681617357, 0.5282518813852088, 752, ['2017-02-03 08:00:00', '2017-02-03 09:00:00']], [0.6605458723714278, 0.5087475876335474, 829, ['2017-02-03 09:00:00', '2017-02-03 10:00:00']], [0.681935206638589, 0.5380623503589123, 975, ['2017-02-03 10:00:00', '2017-02-03 11:00:00']], [0.7053375014472621, 0.5581594757954729, 1072, ['2017-02-03 11:00:00', '2017-02-03 12:00:00']], [0.6448022254769744, 0.4774067400797805, 971, ['2017-02-03 12:00:00', '2017-02-03 13:00:00']], [0.6440954657539415, 0.5204807603104737, 974, ['2017-02-03 13:00:00', '2017-02-03 14:00:00']], [0.671889992190115, 0.5574885191431642, 1062, ['2017-02-03 14:00:00', '2017-02-03 15:00:00']], [0.6285884385998185, 0.49271803361320865, 967, ['2017-02-03 15:00:00', '2017-02-03 16:00:00']], [0.6305364422779015, 0.5117869833872888, 943, ['2017-02-03 16:00:00', '2017-02-03 17:00:00']], [0.696603185834095, 0.6018494821436126, 1047, ['2017-02-03 17:00:00', '2017-02-03 18:00:00']], [0.6659871810244776, 0.5813698474211957, 1035, ['2017-02-03 18:00:00', '2017-02-03 19:00:00']], [0.6539234661574018, 0.526055238079527, 884, ['2017-02-03 19:00:00', '2017-02-03 20:00:00']], [0.7435281549576905, 0.6079817336679906, 1031, ['2017-02-03 20:00:00', '2017-02-03 21:00:00']], [0.7157993140917762, 0.591746663944541, 1107, ['2017-02-03 21:00:00', '2017-02-03 22:00:00']], [0.6758121048666237, 0.5992903498054185, 1037, ['2017-02-03 22:00:00', '2017-02-03 23:00:00']], [0.7289883040153788, 0.6494720916267261, 848, ['2017-02-03 23:00:00', '2017-02-04 00:00:00']], [0.6316994053172504, 0.6284816698782133, 926, ['2017-02-04 00:00:00', '2017-02-04 01:00:00']], [0.6279092005540013, 0.6052311686825865, 623, ['2017-02-04 01:00:00', '2017-02-04 02:00:00']], [0.5862375995776568, 0.578438392205405, 443, ['2017-02-04 02:00:00', '2017-02-04 03:00:00']], [0.42903810226763067, 0.48740568142582835, 221, ['2017-02-04 03:00:00', '2017-02-04 04:00:00']], [0.4445026739733265, 0.351470478492281, 171, ['2017-02-04 04:00:00', '2017-02-04 05:00:00']], [0.5072479219727932, 0.3696604915194773, 152, ['2017-02-04 05:00:00', '2017-02-04 06:00:00']], [0.583187620213324, 0.393443000600873, 278, ['2017-02-04 06:00:00', '2017-02-04 07:00:00']], [0.7492483406765879, 0.5668400042382619, 573, ['2017-02-04 07:00:00', '2017-02-04 08:00:00']], [0.7234582736755982, 0.5699372332594829, 898, ['2017-02-04 08:00:00', '2017-02-04 09:00:00']], [0.6668366974249008, 0.517210915284744, 965, ['2017-02-04 09:00:00', '2017-02-04 10:00:00']], [0.6525838951772379, 0.5152443952600623, 992, ['2017-02-04 10:00:00', '2017-02-04 11:00:00']], [0.659196479211987, 0.5222263621574629, 991, ['2017-02-04 11:00:00', '2017-02-04 12:00:00']], [0.6099577361714645, 0.48228847924537815, 978, ['2017-02-04 12:00:00', '2017-02-04 13:00:00']], [0.6321869473055944, 0.4752064171080463, 991, ['2017-02-04 13:00:00', '2017-02-04 14:00:00']], [0.6563316084854941, 0.5484894633238214, 1097, ['2017-02-04 14:00:00', '2017-02-04 15:00:00']], [0.6895941672664928, 0.571735962250413, 1153, ['2017-02-04 15:00:00', '2017-02-04 16:00:00']], [0.6953536187640234, 0.5724864178044836, 1053, ['2017-02-04 16:00:00', '2017-02-04 17:00:00']], [0.7545633727961168, 0.7455496140815012, 906, ['2017-02-04 17:00:00', '2017-02-04 18:00:00']], [0.7174240203026174, 0.6145270568904465, 1018, ['2017-02-04 18:00:00', '2017-02-04 19:00:00']], [0.6355783149622131, 0.535034301444641, 832, ['2017-02-04 19:00:00', '2017-02-04 20:00:00']], [0.706896573173842, 0.577866174410776, 988, ['2017-02-04 20:00:00', '2017-02-04 21:00:00']], [0.7235804710622528, 0.6193225335773552, 1107, ['2017-02-04 21:00:00', '2017-02-04 22:00:00']], [0.7024219821203312, 0.5881545724009222, 1017, ['2017-02-04 22:00:00', '2017-02-04 23:00:00']], [0.7270978382950795, 0.682747753027788, 888, ['2017-02-04 23:00:00', '2017-02-05 00:00:00']], [0.6925679162089912, 0.6429680636927696, 801, ['2017-02-05 00:00:00', '2017-02-05 01:00:00']], [0.6306101055055163, 0.6386889461225929, 614, ['2017-02-05 01:00:00', '2017-02-05 02:00:00']], [0.6093510312667155, 0.6452289150589967, 405, ['2017-02-05 02:00:00', '2017-02-05 03:00:00']], [0.4836588673409908, 0.4984840163611314, 245, ['2017-02-05 03:00:00', '2017-02-05 04:00:00']], [0.5332039002502372, 0.5065500993471473, 162, ['2017-02-05 04:00:00', '2017-02-05 05:00:00']], [0.5878274336283186, 0.4503386190043066, 160, ['2017-02-05 05:00:00', '2017-02-05 06:00:00']], [0.5597650097650098, 0.4341921265048667, 242, ['2017-02-05 06:00:00', '2017-02-05 07:00:00']], [0.6134038390838314, 0.46586932120431546, 500, ['2017-02-05 07:00:00', '2017-02-05 08:00:00']], [0.595341327226411, 0.44002698607067836, 748, ['2017-02-05 08:00:00', '2017-02-05 09:00:00']], [0.5840192019792375, 0.4561939116090068, 840, ['2017-02-05 09:00:00', '2017-02-05 10:00:00']], [0.6249570566148597, 0.49082701583108856, 895, ['2017-02-05 10:00:00', '2017-02-05 11:00:00']], [0.7075817030980124, 0.5730922811977295, 982, ['2017-02-05 11:00:00', '2017-02-05 12:00:00']], [0.6230370610858597, 0.4734044035480303, 893, ['2017-02-05 12:00:00', '2017-02-05 13:00:00']], [0.6660519464418547, 0.5267564651626507, 941, ['2017-02-05 13:00:00', '2017-02-05 14:00:00']], [0.6856227915194346, 0.5657484627464754, 1069, ['2017-02-05 14:00:00', '2017-02-05 15:00:00']], [0.6615225959795722, 0.5324697468318179, 935, ['2017-02-05 15:00:00', '2017-02-05 16:00:00']], [0.6380113206019924, 0.5388637111510031, 928, ['2017-02-05 16:00:00', '2017-02-05 17:00:00']], [0.7013507356529983, 0.5988430409013962, 1013, ['2017-02-05 17:00:00', '2017-02-05 18:00:00']], [0.6579337536672287, 0.5518604712490603, 1004, ['2017-02-05 18:00:00', '2017-02-05 19:00:00']], [0.6260887749595253, 0.48906698462976117, 800, ['2017-02-05 19:00:00', '2017-02-05 20:00:00']], [0.7227256063067068, 0.5849508322283306, 961, ['2017-02-05 20:00:00', '2017-02-05 21:00:00']], [0.6942071323595573, 0.6166974956467012, 1020, ['2017-02-05 21:00:00', '2017-02-05 22:00:00']], [0.7138902106224343, 0.606164699327698, 1190, ['2017-02-05 22:00:00', '2017-02-05 23:00:00']], [0.7765781269175454, 0.7173382574251804, 899, ['2017-02-05 23:00:00', '2017-02-06 00:00:00']], [0.6920876291142368, 0.6150837223419312, 1005, ['2017-02-06 00:00:00', '2017-02-06 01:00:00']], [0.6089077399984345, 0.5442522800911777, 642, ['2017-02-06 01:00:00', '2017-02-06 02:00:00']], [0.6140113565783949, 0.5386220966918788, 402, ['2017-02-06 02:00:00', '2017-02-06 03:00:00']], [0.5142122172766765, 0.5535549445057454, 228, ['2017-02-06 03:00:00', '2017-02-06 04:00:00']], [0.48012654986235304, 0.3994753385484366, 131, ['2017-02-06 04:00:00', '2017-02-06 05:00:00']], [0.593691574111202, 0.3633560554265639, 151, ['2017-02-06 05:00:00', '2017-02-06 06:00:00']], [0.6044525433007525, 0.4577224988189119, 325, ['2017-02-06 06:00:00', '2017-02-06 07:00:00']], [0.7168629367038046, 0.554511371919586, 610, ['2017-02-06 07:00:00', '2017-02-06 08:00:00']], [0.755282901486093, 0.6504775243801567, 867, ['2017-02-06 08:00:00', '2017-02-06 09:00:00']], [0.7099866616551761, 0.5566568677245423, 848, ['2017-02-06 09:00:00', '2017-02-06 10:00:00']], [0.6776508800258023, 0.5282198493357636, 1061, ['2017-02-06 10:00:00', '2017-02-06 11:00:00']], [0.6812976853145349, 0.5021343378865876, 1062, ['2017-02-06 11:00:00', '2017-02-06 12:00:00']], [0.6182401560346023, 0.44799134633915194, 895, ['2017-02-06 12:00:00', '2017-02-06 13:00:00']], [0.6211186170786066, 0.4966216737421578, 915, ['2017-02-06 13:00:00', '2017-02-06 14:00:00']], [0.6419147073212025, 0.5268052323086475, 1056, ['2017-02-06 14:00:00', '2017-02-06 15:00:00']], [0.5734962213810065, 0.49393934833152997, 957, ['2017-02-06 15:00:00', '2017-02-06 16:00:00']], [0.5940326033186907, 0.4739009377799297, 874, ['2017-02-06 16:00:00', '2017-02-06 17:00:00']], [0.6630324661563192, 0.5647228901037203, 854, ['2017-02-06 17:00:00', '2017-02-06 18:00:00']], [0.6687324498097363, 0.545494388766306, 898, ['2017-02-06 18:00:00', '2017-02-06 19:00:00']], [0.5895420055512931, 0.49849449685263214, 810, ['2017-02-06 19:00:00', '2017-02-06 20:00:00']], [0.6945800157148798, 0.5589290907968367, 1002, ['2017-02-06 20:00:00', '2017-02-06 21:00:00']], [0.6845661137942839, 0.5872747025706151, 1053, ['2017-02-06 21:00:00', '2017-02-06 22:00:00']], [0.6841032616473914, 0.6043006642007395, 1028, ['2017-02-06 22:00:00', '2017-02-06 23:00:00']], [0.7421053540289028, 0.7005505505078231, 867, ['2017-02-06 23:00:00', '2017-02-07 00:00:00']], [0.6774623565059964, 0.6234491103873282, 914, ['2017-02-07 00:00:00', '2017-02-07 01:00:00']], [0.6202245214284197, 0.6363254329085919, 661, ['2017-02-07 01:00:00', '2017-02-07 02:00:00']], [0.563360257200958, 0.4818431073436532, 381, ['2017-02-07 02:00:00', '2017-02-07 03:00:00']], [0.5395485472774483, 0.37868202844702953, 222, ['2017-02-07 03:00:00', '2017-02-07 04:00:00']], [0.42812686442498143, 0.3970170454545455, 132, ['2017-02-07 04:00:00', '2017-02-07 05:00:00']], [0.47222115808224946, 0.4197032111046595, 155, ['2017-02-07 05:00:00', '2017-02-07 06:00:00']], [0.5804408875854244, 0.462660626204035, 280, ['2017-02-07 06:00:00', '2017-02-07 07:00:00']], [0.7101980289689654, 0.5437941379428481, 696, ['2017-02-07 07:00:00', '2017-02-07 08:00:00']], [0.7313361048607684, 0.5910090471928334, 856, ['2017-02-07 08:00:00', '2017-02-07 09:00:00']], [0.6635300586001783, 0.5067778825227949, 923, ['2017-02-07 09:00:00', '2017-02-07 10:00:00']], [0.6701261523591932, 0.5206623293860958, 935, ['2017-02-07 10:00:00', '2017-02-07 11:00:00']], [0.6598258810186961, 0.5147277585660535, 965, ['2017-02-07 11:00:00', '2017-02-07 12:00:00']], [0.6241374353076482, 0.44290895761765037, 897, ['2017-02-07 12:00:00', '2017-02-07 13:00:00']], [0.5960264976509907, 0.45542485182173775, 878, ['2017-02-07 13:00:00', '2017-02-07 14:00:00']], [0.6006213721614538, 0.46945537857830555, 974, ['2017-02-07 14:00:00', '2017-02-07 15:00:00']], [0.5839384257914612, 0.46764068577286855, 903, ['2017-02-07 15:00:00', '2017-02-07 16:00:00']], [0.6390918129552201, 0.5116499514805697, 871, ['2017-02-07 16:00:00', '2017-02-07 17:00:00']], [0.6647631094328392, 0.6048635751907, 874, ['2017-02-07 17:00:00', '2017-02-07 18:00:00']], [0.6717323599343628, 0.5522647886003208, 851, ['2017-02-07 18:00:00', '2017-02-07 19:00:00']], [0.5779065155844447, 0.470427411478806, 797, ['2017-02-07 19:00:00', '2017-02-07 20:00:00']], [0.6643042429130617, 0.535571071485553, 942, ['2017-02-07 20:00:00', '2017-02-07 21:00:00']], [0.695564149305656, 0.5931805121839898, 1030, ['2017-02-07 21:00:00', '2017-02-07 22:00:00']], [0.6862067138862098, 0.6150410268919386, 1059, ['2017-02-07 22:00:00', '2017-02-07 23:00:00']], [0.7132286646520002, 0.6569601013057997, 833, ['2017-02-07 23:00:00', '2017-02-08 00:00:00']], [0.6414362541754711, 0.5606793882798755, 871, ['2017-02-08 00:00:00', '2017-02-08 01:00:00']], [0.6447611421006877, 0.582401614264177, 620, ['2017-02-08 01:00:00', '2017-02-08 02:00:00']], [0.5492580759008187, 0.5903544925119942, 305, ['2017-02-08 02:00:00', '2017-02-08 03:00:00']], [0.4599274269113748, 0.4304260388244206, 221, ['2017-02-08 03:00:00', '2017-02-08 04:00:00']], [0.3963891645746979, 0.4009596894580111, 134, ['2017-02-08 04:00:00', '2017-02-08 05:00:00']], [0.4680735116493761, 0.40089017129660937, 168, ['2017-02-08 05:00:00', '2017-02-08 06:00:00']], [0.5855027034045276, 0.42154876431323174, 282, ['2017-02-08 06:00:00', '2017-02-08 07:00:00']], [0.6754870013464741, 0.5271043993170922, 692, ['2017-02-08 07:00:00', '2017-02-08 08:00:00']], [0.7648989610686152, 0.604196283895867, 909, ['2017-02-08 08:00:00', '2017-02-08 09:00:00']], [0.6803594655626152, 0.5358678275393837, 917, ['2017-02-08 09:00:00', '2017-02-08 10:00:00']], [0.6524212434841731, 0.5376703506556422, 947, ['2017-02-08 10:00:00', '2017-02-08 11:00:00']], [0.6577994488131205, 0.5103618985672214, 937, ['2017-02-08 11:00:00', '2017-02-08 12:00:00']], [0.5824480088096181, 0.4711113834020714, 977, ['2017-02-08 12:00:00', '2017-02-08 13:00:00']], [0.6657380744433661, 0.5421973020717702, 1030, ['2017-02-08 13:00:00', '2017-02-08 14:00:00']], [0.6931011708062885, 0.5587646826951919, 1135, ['2017-02-08 14:00:00', '2017-02-08 15:00:00']], [0.6327662808098797, 0.5174946197569122, 919, ['2017-02-08 15:00:00', '2017-02-08 16:00:00']], [0.6462605857852054, 0.5743563579433287, 840, ['2017-02-08 16:00:00', '2017-02-08 17:00:00']], [0.6829795523382224, 0.6159079618010196, 826, ['2017-02-08 17:00:00', '2017-02-08 18:00:00']], [0.7244220481467332, 0.6613722830962729, 874, ['2017-02-08 18:00:00', '2017-02-08 19:00:00']], [0.6612398172999955, 0.5297939323969132, 890, ['2017-02-08 19:00:00', '2017-02-08 20:00:00']], [0.6832878208629163, 0.5646960341242395, 891, ['2017-02-08 20:00:00', '2017-02-08 21:00:00']], [0.6993083050258229, 0.5695329065419166, 1066, ['2017-02-08 21:00:00', '2017-02-08 22:00:00']], [0.68778341706062, 0.5833608006472297, 1011, ['2017-02-08 22:00:00', '2017-02-08 23:00:00']], [0.7108320054615407, 0.6514290171150573, 820, ['2017-02-08 23:00:00', '2017-02-09 00:00:00']], [0.6553327703130066, 0.628662265401886, 907, ['2017-02-09 00:00:00', '2017-02-09 01:00:00']], [0.6209977021175306, 0.5751388545773125, 515, ['2017-02-09 01:00:00', '2017-02-09 02:00:00']], [0.59127830190118, 0.49283613591851466, 313, ['2017-02-09 02:00:00', '2017-02-09 03:00:00']], [0.4944983900818902, 0.42718514626029075, 171, ['2017-02-09 03:00:00', '2017-02-09 04:00:00']], [0.46462697746203946, 0.4416787830125214, 137, ['2017-02-09 04:00:00', '2017-02-09 05:00:00']], [0.44556088963288776, 0.411196458849893, 152, ['2017-02-09 05:00:00', '2017-02-09 06:00:00']], [0.5816766225539906, 0.44608717544902804, 298, ['2017-02-09 06:00:00', '2017-02-09 07:00:00']], [0.7179233851325021, 0.5524934681808152, 719, ['2017-02-09 07:00:00', '2017-02-09 08:00:00']], [0.7022194005445619, 0.5567343551817051, 903, ['2017-02-09 08:00:00', '2017-02-09 09:00:00']], [0.6888032927087205, 0.5508535346204094, 959, ['2017-02-09 09:00:00', '2017-02-09 10:00:00']], [0.6736625846471493, 0.5541991829990869, 955, ['2017-02-09 10:00:00', '2017-02-09 11:00:00']], [0.68223896557113, 0.5046984674069843, 990, ['2017-02-09 11:00:00', '2017-02-09 12:00:00']], [0.599243121017024, 0.42347496998010814, 894, ['2017-02-09 12:00:00', '2017-02-09 13:00:00']], [0.6069566569805008, 0.4816688825685978, 952, ['2017-02-09 13:00:00', '2017-02-09 14:00:00']], [0.6688265298198676, 0.522474942059556, 987, ['2017-02-09 14:00:00', '2017-02-09 15:00:00']], [0.6355250615256921, 0.492892829868254, 854, ['2017-02-09 15:00:00', '2017-02-09 16:00:00']], [0.6520933901288293, 0.5559524025063336, 835, ['2017-02-09 16:00:00', '2017-02-09 17:00:00']], [0.667844281118802, 0.5844872416749394, 784, ['2017-02-09 17:00:00', '2017-02-09 18:00:00']], [0.6585460602516029, 0.551287151733754, 856, ['2017-02-09 18:00:00', '2017-02-09 19:00:00']], [0.6206397964718025, 0.4830686474196931, 934, ['2017-02-09 19:00:00', '2017-02-09 20:00:00']], [0.6691590175266664, 0.549855500821018, 1033, ['2017-02-09 20:00:00', '2017-02-09 21:00:00']], [0.6864985859867971, 0.5906471014848378, 1115, ['2017-02-09 21:00:00', '2017-02-09 22:00:00']], [0.6981023293748724, 0.6054272936725619, 1208, ['2017-02-09 22:00:00', '2017-02-09 23:00:00']], [0.7203082472276143, 0.6744292549612009, 951, ['2017-02-09 23:00:00', '2017-02-10 00:00:00']]]
    paint_dataSet = []
    i = 0
    for data in dataSet:
        time_ = data[3]
        now_time = (get_date_time(time_[0]) + timedelta(hours=0.5))
        paint_dataSet.append([i, data[0], data[1], data[2], str(now_time)])
        i += 1
    fre = [data[2] for data in dataSet]
    fre = np.array(fre).reshape(-1, 1)
    min_max_scaler = preprocessing.MinMaxScaler()
    y1 = min_max_scaler.fit_transform(fre).tolist()
    for i in range(len(paint_dataSet)):
        paint_dataSet[i][3] = y1[i][0]
    dataSet = pd.DataFrame(paint_dataSet, columns=['count', 'mileage_utilization', 'time_utilization', 'pick_up_freq', 'date'])
    return dataSet


class ModeDecomp(object):
    def __init__(self, dataSet,type, test_size = 24):
        data = dataSet.set_index('date')
        data.index = pd.to_datetime(data.index)
        self.dataSet = data
        self.test_size = test_size
        self.train_size = len(self.dataSet) - self.test_size
        # self.mile_train = self.dataSet['mileage_utilization'][:len(self.dataSet) - test_size]
        # self.time_train = self.dataSet['time_utilization'][:len(self.dataSet) - test_size]
        # self.num_rain = self.dataSet['pick_up_freq'][:len(self.dataSet) - test_size]
        self.train = self.dataSet[type][:len(self.dataSet) - test_size]
        self.train = self._diff_smooth(self.train)
        # self.train = self._diff_smooth(self.time_train)
        # self.num_rain = self._diff_smooth(self.num_rain)
        self.test =  self.dataSet[type][-test_size:]
        # self.test =  self.dataSet['time_utilization'][-test_size:]

    # 对数据进行平滑处理
    def _diff_smooth(self, dataSet):
        dif = dataSet.diff()         # 差分序列
        td = dif.describe()
        high = td['75%'] + 1.5 * (td['75%'] - td['25%'])  # 定义高点阈值，1.5倍四分位距之外
        low = td['25%'] - 1.5 * (td['75%'] - td['25%'])  # 定义低点阈值，同上

        # 变化幅度超过阈值的点的索引
        forbid_index = dif[(dif > high) | (dif < low)].index
        i = 0
        while i < len(forbid_index) - 1:
            n = 1  # 发现连续多少个点变化幅度过大，大部分只有单个点
            start = forbid_index[i]  # 异常点的起始索引
            while forbid_index[i + n] == start + timedelta(minutes=60*n):
                n += 1
                if (i + n) > len(forbid_index) - 1:
                    break
            i += n - 1
            end = forbid_index[i]  # 异常点的结束索引
            # 用前后值的中间值均匀填充
            try:
                value = np.linspace(dataSet[start - timedelta(minutes=60)], dataSet[end + timedelta(minutes=60)], n)
                dataSet[start: end] = value
            except:
                pass
            i += 1
        return dataSet

    def decomp(self, freq):
        decomposition = seasonal_decompose(self.train, freq=freq, two_sided=False)
        self.trend = decomposition.trend
        self.seasonal = decomposition.seasonal
        self.residual = decomposition.resid
        # decomposition.plot()
        # plt.show()
        d = self.residual.describe()
        delta = d['75%'] - d['25%']
        self.low_error, self.high_error = (d['25%'] - 1*delta, d['75%'] + 1*delta)

    def trend_model(self, order):
        self.trend.dropna(inplace=True)
        self.trend_model_ = ARIMA(self.trend, order).fit(disp=-1, method='css')
        # return self.trend_model_

    def predict_new(self):
        """
        预测新数据
        :return:
        """
        n = self.test_size
        self.pred_time_index = pd.date_range(start=self.train.index[-1], periods = n+1, freq='60min')[1:]
        self.trend_pred = self.trend_model_.forecast(n)[0]
        pred_time_index = self.add_season()
        return pred_time_index

    def add_season(self):
        '''
        为预测出的趋势数据添加周期数据和残差数据
        '''
        self.train_season = self.seasonal[:self.train_size]
        values = []
        low_conf_values = []
        high_conf_values = []

        for i,t in enumerate(self.pred_time_index):
            trend_part = self.trend_pred[i]
            #相同时间的数据均值
            season_part = self.train_season[
                self.train_season.index.time == t.time()
                ].mean()
            #趋势+周期+误差界限
            predict = trend_part + season_part
            low_bound = trend_part + season_part + self.low_error
            high_bound = trend_part + season_part + self.high_error

            values.append(predict)
            low_conf_values.append(low_bound)
            high_conf_values.append(high_bound)
        self.final_pred = pd.Series(values, index=self.pred_time_index, name='predict')
        self.low_conf = pd.Series(low_conf_values, index=self.pred_time_index, name='low_conf')
        self.high_conf = pd.Series(high_conf_values, index=self.pred_time_index, name='high_conf')

        return self.pred_time_index

def accessMode(trueData, testData):
    trueData = np.array(trueData).tolist()
    testData = np.array(testData).tolist()
    sum = 0
    for i in range(len(trueData)):
        sum += abs((trueData[i] - testData[i])/trueData[i])
    sum = 100*sum/len(trueData)
    # print("预测模型评估(MAPE): {}%".format(round(sum, 3)))
    # print("评估标准：越接近0，模型预测越接近实际值")
    # sum = 0
    # for i in range(len(trueData)):
    #     sum += abs(trueData[i] - testData[i])/(abs(trueData[i])+abs(testData[i]))
    # sum = 200*sum/len(trueData)
    # # print("模型评估(SMAPE): {}%".format(round(sum,3)))
    # sum = 0
    # for i in range(len(trueData)):
    #     sum += (trueData[i] - testData[i])**2
    # sum = math.sqrt(sum/len(trueData))
    # # print("模型评估(RMSE): {}%".format(round(sum, 3)))
    return sum

# 画出未来的与现在的图
# def painting_pre(pred, test):
#     plt.subplot(211)
#     plt.plot(mode.train)
#     plt.subplot(212)
#     test1 = np.array(test).tolist()
#     test = pd.Series(test1, index=pred_time_index, name='test')
#     pred.plot(color='salmon', label='Predict')
#     test.plot(color='steelblue', label='Original')
#     mode.low_conf.plot(color='grey', label='low')
#     mode.high_conf.plot(color='grey', label='high')
#     accessMode(test, pred)
#     plt.legend(loc='right')
#     plt.tight_layout()
#     plt.show()

def time_experate(date_time, hours=1, day=7):
    """
    区间选择器，这个hours表示将每天分成几个小时，day是表示一共前面历史天数
    :param date_time:
    :param hours:
    :param day:
    :return:
    """
    date_time = date_time + ' 00:00:00'
    date_time = get_date_time(date_time)
    date_time = date_time + timedelta(days= 2)
    pre_date_time = date_time - timedelta(days = day-1)
    if pre_date_time < get_date_time('2017-02-01 00:00:00'):
        pre_date_time = get_date_time('2017-02-01 00:00:00')
        day = date_time - pre_date_time
        day = int(str(day)[0]) + 1
    num = int(24/hours)
    time_stamp = []
    for j in range(day):
        for i in range(num):
            date_time1 = pre_date_time + timedelta(hours= hours) * ( i + 1)
            date_time2 = pre_date_time + timedelta(hours = hours) * i
            time_stamp.append([str(date_time2), str(date_time1)])
        pre_date_time = pre_date_time + timedelta(days=1)
    return time_stamp

def Adim_dict():
    Adim_dicts = {
        1 : '花都区',
        2 : '南沙区',
        3 : '增城区',
        4 : '从化区',
        5 : '番禺区',
        6 : '白云区',
        7 : '黄埔区',
        8 : '荔湾区',
        9 : '海珠区',
        10: '天河区',
        11 : '越秀区'
    }
    return Adim_dicts


def predict(areaDict):
    Adim_dicts = Adim_dict()
    name_effict = {'pick_up_freq': '载客频率', 'mileage_utilization': '里程利用率', 'time_utilization':'出车率'}
    area = areaDict['area']
    Date = areaDict['Date']
    timeStamp = time_experate(Date)
    dataSet = []
    predict_Dict = {}
    Date = Date + " 00:00:00"
    for time in timeStamp:
            data = get_efficiencyPredict(area, time)
            dataSet.append(data)
    paramster = []
    for type in ['pick_up_freq', 'mileage_utilization','time_utilization']:   ## 一次可以得到三个预测值
        type_dict = {}
        name_type = Adim_dicts[area] + name_effict[type]
        type_dict['type'] = name_type
        data = changeData(dataSet, type)
        print(data)
        if get_date_time(Date) < get_date_time("2017-02-05 00:00:00"):
            size = int(len(data)/7)
        else:
            size = 48
        mode = ModeDecomp(data, type, test_size=size)
        mode.decomp(size)
        for lis in [[3, 1, 3], [1, 2, 3], [5, 2, 3], [1, 1, 2], [3, 1, 4],[0,0,1]]:
            try:
                mode.trend_model(order=(lis[0], lis[1], lis[2]))
                break
            except:
                continue
        # mode.trend_model(order=(0, 0, 1))
        pred_time_index = mode.predict_new()
        pred = mode.final_pred
        test = mode.test
        # accessMode(test, pred)
        pred = np.array(pred).tolist()
        train = np.array(data[type]).tolist()[:len(data) - size]
        if type == 'pick_up_freq':
            pred = [int(fre) for fre in pred]
            train = [int(fre) for fre in train]
        else:
            pred = [round(num*100.0, 1) for num in pred]
            train = [round(num*100.0, 1) for num in train]
        y = train+pred
        x = [[time[5:10] for time in np.array(data['date']).tolist()[:(len(data)-size)]], [time[5:10] for time in np.array(data['date']).tolist()[(len(data)-size):]]]
        type_dict['x'] = x
        type_dict['y'] = y
        # print(len(pred))
        predict_Dict[type] = type_dict
        # paramster.append([best_i, best_j, best_k])
    # print(area, Date, paramster[0], paramster[1], paramster[2])
    print(predict_Dict)
    # input()
    # insert_Operateefficient_predict(str(area), str(Date), str(paramster[0]), str(paramster[1]), str(paramster[2]))
    # plt.subplot(211)
    # plt.plot(mode.train)
    # plt.subplot(212)
    # test1 = np.array(test).tolist()
    # test = pd.Series(test1, index=pred_time_index, name='test')
    # pred.plot(color='salmon', label='Predict')
    # test.plot(color='steelblue', label='Original')
    # mode.low_conf.plot(color='grey', label='low')
    # mode.high_conf.plot(color='grey', label='high')
    # plt.legend(loc='right')
    # plt.tight_layout()
    # plt.show()
    # accessMode(test, pred)



# 画图
if __name__ == '__main__':
    date = get_date_time('2017-02-01 00:00:00')
    # for j in range(21):
    #     Date = str(date+timedelta(days=j))
    #     areaDict = {'area': 2, 'Date': Date[:10]}
    #     predict(areaDict)
    areaDict = {'area': 11, 'Date': '2017-02-16'}
    predict(areaDict)
    # for i in range(1, 12):
    #     for j in range(15):
    #         date2 = date + timedelta(days=j)
    #         print(date2)
    #         date1 = str(date2)[:10]
    #         areaDict = {'area': i, 'Date':date1}
    #         predict(areaDict)

